{"version":3,"sources":["Text.tsx"],"names":["React","Text","NativeText","StyleSheet","I18nManager","useTheme","MD3TypescaleKey","ref","style","variant","theme","initialTheme","rest","root","useRef","writingDirection","getConstants","isRTL","useImperativeHandle","setNativeProps","args","current","isV3","stylesByVariant","Object","keys","reduce","acc","key","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","fonts","color","colors","onSurface","styleForVariant","styles","text","font","regular","textStyle","create","textAlign","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n  I18nManager,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, ThemeProp } from '../../types';\n\nexport type Props = React.ComponentProps<typeof NativeText> & {\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  children: React.ReactNode;\n  theme?: ThemeProp;\n  style?: StyleProp<TextStyle>;\n};\n\n// @component-group Typography\n\n/**\n * Typography component showing styles complied with passed `variant` prop and supported by the type system.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/typography.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <Text variant=\"displayLarge\">Display Large</Text>\n *     <Text variant=\"displayMedium\">Display Medium</Text>\n *     <Text variant=\"displaySmall\">Display small</Text>\n *\n *     <Text variant=\"headlineLarge\">Headline Large</Text>\n *     <Text variant=\"headlineMedium\">Headline Medium</Text>\n *     <Text variant=\"headlineSmall\">Headline Small</Text>\n *\n *     <Text variant=\"titleLarge\">Title Large</Text>\n *     <Text variant=\"titleMedium\">Title Medium</Text>\n *     <Text variant=\"titleSmall\">Title Small</Text>\n *\n *     <Text variant=\"bodyLarge\">Body Large</Text>\n *     <Text variant=\"bodyMedium\">Body Medium</Text>\n *     <Text variant=\"bodySmall\">Body Small</Text>\n *\n *     <Text variant=\"labelLarge\">Label Large</Text>\n *     <Text variant=\"labelMedium\">Label Medium</Text>\n *     <Text variant=\"labelSmall\">Label Small</Text>\n *  </>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\n\nconst Text: React.ForwardRefRenderFunction<{}, Props> = (\n  { style, variant, theme: initialTheme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n  // FIXME: destructure it in TS 4.6+\n  const theme = useTheme(initialTheme);\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.fonts[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            fontFamily,\n            fontSize,\n            fontWeight,\n            lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <NativeText\n        ref={root}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n        {...rest}\n      />\n    );\n  } else {\n    const font = !theme.isV3 ? theme.fonts?.regular : {};\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text,\n    };\n    return (\n      <NativeText\n        {...rest}\n        ref={root}\n        style={[styles.text, textStyle, { writingDirection }, style]}\n      />\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default React.forwardRef(Text);\n"]}