{"version":3,"sources":["InputLabel.tsx"],"names":["React","Animated","StyleSheet","AnimatedText","InputLabel","props","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","lineHeight","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","testID","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","textColor","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","top","color","create","zIndex"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,YAAP,MAAyB,+BAAzB;;AAIA,MAAMC,UAAU,GAAIC,KAAD,IAA4B;AAC7C,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAmCF,KAAzC;AACA,QAAM;AACJG,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,oBAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,gBANI;AAOJC,IAAAA,mBAPI;AAQJC,IAAAA,mBARI;AASJC,IAAAA,IATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA,UAXI;AAYJC,IAAAA,UAZI;AAaJC,IAAAA,kBAbI;AAcJC,IAAAA,aAdI;AAeJC,IAAAA,UAfI;AAgBJC,IAAAA,WAhBI;AAiBJC,IAAAA,aAjBI;AAkBJC,IAAAA,gBAlBI;AAmBJC,IAAAA,UAnBI;AAoBJC,IAAAA,uBApBI;AAqBJC,IAAAA,qBArBI;AAsBJC,IAAAA;AAtBI,MAuBFxB,KAAK,CAACyB,UAvBV;AAyBA,QAAMC,iBAAiB,GAAG;AACxBC,IAAAA,SAAS,EAAE,CACT;AACE;AACAC,MAAAA,UAAU,EAAE3B,WAAW,CAAC4B,OAAZ,CAAoBC,WAApB,CAAgC;AAC1CC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD8B;AAE1CC,QAAAA,WAAW,EAAE,CAACvB,mBAAD,EAAsBa,uBAAuB,IAAI,CAAjD;AAF6B,OAAhC;AAFd,KADS;AADa,GAA1B;AAYA,QAAMW,UAAU,GAAG,EACjB,GAAGtB,IADc;AAEjBC,IAAAA,QAFiB;AAGjBC,IAAAA,UAHiB;AAIjBC,IAAAA,UAJiB;AAKjBa,IAAAA,SAAS,EAAE,CACT;AACE;AACAC,MAAAA,UAAU,EAAE3B,WAAW,CAACG,KAAZ,CAAkB0B,WAAlB,CAA8B;AACxCC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAD4B;AAExCC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI/B,WAAW,CAACiC,KAAZ,IAAqB9B,KAArB,GAA6BY,aAA7B,GAA6C,CAAjD,EAAoD,CAApD;AAF2B,OAA9B;AAFd,KADS,EAQT;AACE;AACAmB,MAAAA,UAAU,EAAElC,WAAW,CAAC4B,OAAZ,CAAoBC,WAApB,CAAgC;AAC1CC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD8B;AAE1CC,QAAAA,WAAW,EAAE,CAACtB,mBAAD,EAAsB,CAAtB;AAF6B,OAAhC;AAFd,KARS,EAeT;AACE;AACA0B,MAAAA,KAAK,EAAEnC,WAAW,CAAC4B,OAAZ,CAAoBC,WAApB,CAAgC;AACrCC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADyB;AAErCC,QAAAA,WAAW,EAAE,CAACf,UAAD,EAAa,CAAb;AAFwB,OAAhC;AAFT,KAfS;AALM,GAAnB;AA8BA,QAAMoB,SAAS,GAAGjC,KAAK,IAAIiB,UAAT,GAAsBA,UAAtB,GAAmCD,gBAArD;AAEA,SAAOjB,KAAK;AAAA;AACV;AACA;AACA,sBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CACLN,UAAU,CAACyC,YADN,EAELC,MAAM,CAACC,cAFF,EAGL;AACEC,MAAAA,OAAO,EACL;AACAxC,MAAAA,WAAW,CAACiC,KAAZ,IAAqBjC,WAAW,CAACyC,OAAjC,GACIzC,WAAW,CAAC0C,WAAZ,CAAwBC,QAAxB,GACE,CADF,GAEE,CAHN,GAII;AAPR,KAHK,EAYLlB,iBAZK;AAFT,KAiBGxB,eAjBH,aAiBGA,eAjBH,uBAiBGA,eAAe,CAAG;AACjBD,IAAAA,WADiB;AAEjBgC,IAAAA,UAFiB;AAGjBR,IAAAA,UAAU,EAAEzB,KAAK,CAACyB,UAHD;AAIjBF,IAAAA,qBAAqB,EAAEA;AAJN,GAAH,CAjBlB,eAuBE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,QAAQ,EAAElB,oBAFZ;AAGE,IAAA,KAAK,EAAE,CACLG,gBADK,EAEL;AACEqC,MAAAA,GAAG,EAAE3B;AADP,KAFK,EAKLe,UALK,EAMLd,aAAa,IAAI,EANZ,EAOL;AACE2B,MAAAA,KAAK,EAAEvC,WADT;AAEEkC,MAAAA,OAAO,EAAExC,WAAW,CAAC4B,OAAZ,CAAoBC,WAApB,CAAgC;AACvCC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD2B;AAEvCC,QAAAA,WAAW,EAAE,CAAC1B,gBAAgB,GAAG,CAAH,GAAO,CAAxB,EAA2B,CAA3B;AAF0B,OAAhC;AAFX,KAPK,CAHT;AAkBE,IAAA,aAAa,EAAE,CAlBjB;AAmBE,IAAA,qBAAqB,EAAEiB,qBAnBzB;AAoBE,IAAA,MAAM,EAAG,GAAEC,MAAO;AApBpB,KAsBGrB,KAtBH,CAvBF,eA+CE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEF,WAAW,CAACyC,OAAZ,GAAsB,WAAtB,GAAoC,WAD/C;AAEE,IAAA,KAAK,EAAE,CACLlC,gBADK,EAEL;AACEqC,MAAAA,GAAG,EAAE3B;AADP,KAFK,EAKLe,UALK,EAMLd,aANK,EAOL;AACE2B,MAAAA,KAAK,EAAET,SADT;AAEEI,MAAAA,OAAO,EAAE1B;AAFX,KAPK,CAFT;AAcE,IAAA,aAAa,EAAE,CAdjB;AAeE,IAAA,qBAAqB,EAAEQ,qBAfzB;AAgBE,IAAA,MAAM,EAAG,GAAEC,MAAO;AAhBpB,KAkBGrB,KAlBH,CA/CF,CAHU,GAuER,IAvEJ;AAwED,CA/ID;;AAiJA,MAAMoC,MAAM,GAAG1C,UAAU,CAACkD,MAAX,CAAkB;AAC/BP,EAAAA,cAAc,EAAE;AACdQ,IAAAA,MAAM,EAAE;AADM;AADe,CAAlB,CAAf;AAMA,eAAejD,UAAf","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n    testID,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  const textColor = error && errorColor ? errorColor : placeholderColor;\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        variant=\"bodySmall\"\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-active`}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        variant={parentState.focused ? 'bodyLarge' : 'bodySmall'}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: textColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-inactive`}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]}