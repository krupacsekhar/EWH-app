{"version":3,"sources":["AnimatedText.tsx"],"names":["AnimatedText","style","theme","variant","rest","writingDirection","I18nManager","getConstants","isRTL","isV3","stylesByVariant","Object","keys","MD3TypescaleKey","reduce","acc","key","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","fonts","color","colors","onSurface","styleForVariant","styles","text","font","regular","bodyMedium","textStyle","StyleSheet","create","textAlign"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AACA;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,OAAiE;AAAA,MAA3C;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,OAAhB;AAAyB,OAAGC;AAA5B,GAA2C;AAC/D,QAAMC,gBAAgB,GAAGC,yBAAYC,YAAZ,GAA2BC,KAA3B,GAAmC,KAAnC,GAA2C,KAApE;;AAEA,MAAIN,KAAK,CAACO,IAAN,IAAcN,OAAlB,EAA2B;AACzB,UAAMO,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYC,sBAAZ,EAA6BC,MAA7B,CACtB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,UAAZ;AAAwBC,QAAAA,UAAxB;AAAoCC,QAAAA,aAApC;AAAmDC,QAAAA;AAAnD,UACJnB,KAAK,CAACoB,KAAN,CAAYN,GAAZ,CADF;AAGA,aAAO,EACL,GAAGD,GADE;AAEL,SAACC,GAAD,GAAO;AACLK,UAAAA,UADK;AAELJ,UAAAA,QAFK;AAGLC,UAAAA,UAHK;AAILC,UAAAA,UAAU,EAAEA,UAJP;AAKLC,UAAAA,aALK;AAMLG,UAAAA,KAAK,EAAErB,KAAK,CAACsB,MAAN,CAAaC;AANf;AAFF,OAAP;AAWD,KAhBqB,EAiBtB,EAjBsB,CAAxB;AA2BA,UAAMC,eAAe,GAAGhB,eAAe,CAACP,OAAD,CAAvC;AAEA,wBACE,oBAAC,qBAAD,CAAU,IAAV,eACMC,IADN;AAEE,MAAA,KAAK,EAAE,CAACsB,eAAD,EAAkBC,MAAM,CAACC,IAAzB,EAA+B;AAAEvB,QAAAA;AAAF,OAA/B,EAAqDJ,KAArD;AAFT,OADF;AAMD,GApCD,MAoCO;AACL,UAAM4B,IAAI,GAAG,CAAC3B,KAAK,CAACO,IAAP,GAAcP,KAAK,CAACoB,KAAN,CAAYQ,OAA1B,GAAoC5B,KAAK,CAACoB,KAAN,CAAYS,UAA7D;AACA,UAAMC,SAAS,GAAG,EAChB,GAAGH,IADa;AAEhBN,MAAAA,KAAK,EAAErB,KAAK,CAACO,IAAN,GAAaP,KAAK,CAACsB,MAAN,CAAaC,SAA1B,GAAsCvB,KAAK,CAACsB,MAAN,CAAaI;AAF1C,KAAlB;AAIA,wBACE,oBAAC,qBAAD,CAAU,IAAV,eACMxB,IADN;AAEE,MAAA,KAAK,EAAE,CACLuB,MAAM,CAACC,IADF,EAELI,SAFK,EAGL;AACE3B,QAAAA;AADF,OAHK,EAMLJ,KANK;AAFT,OADF;AAaD;AACF;;AAED,MAAM0B,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,IAAI,EAAE;AACJO,IAAAA,SAAS,EAAE;AADP;AADyB,CAAlB,CAAf;;eAMe,wBAAUnC,YAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, variant, ...rest }: Props) {\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.fonts[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            fontFamily,\n            fontSize,\n            fontWeight,\n            lineHeight: lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n      />\n    );\n  } else {\n    const font = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n    };\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          textStyle,\n          {\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]}